{"version":3,"file":"svgComponentGenerator.js","sourceRoot":"","sources":["../../../../src/modules/svg-component-generator/svgComponentGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { readdir, writeFile, readFile, mkdir } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport _debounce from 'lodash/debounce';\nimport _startCase from 'lodash/startCase';\n\n// const svgFileDir = path.resolve(__dirname, '../');\n\nexport type SvgComponentGeneratorOption = {\n\tsvgFileDir: string; \n\toutputDir?: string;\n\tremoveViewBox?: boolean;\n\ttypescript?: boolean;\n\tuseSvgr?: boolean;\n\ttitle?: boolean;\n\tdescription?: boolean;\n};\n\nlet generating = false;\n\n/**\n * SvgComponentGenerator 클래스는 SVG 파일들을 React 컴포넌트로 변환합니다.\n * 이 클래스는 SVG 파일들이 저장된 디렉토리를 읽고, 각 SVG 파일을 React 컴포넌트로 변환하여\n * 지정된 출력 디렉토리에 저장합니다. TypeScript를 지원하며, 필요에 따라 SVGR을 사용할 수 있습니다.\n */\nclass SvgComponentGenerator {\n\t/**\n   * SVG 파일들이 위치한 디렉토리 경로\n   */\n\tprivate readonly svgFileDir: string;\n\t/**\n   * TypeScript를 사용할지 여부\n   */\n\tprivate readonly typescript: boolean;\n\t/**\n   * 변환된 컴포넌트들이 저장될 출력 디렉토리 경로\n   */\n\tprivate readonly outputDir: string;\n\t/**\n   * SVG에서 viewBox를 제거할지 여부\n   */\n\tprivate readonly removeViewBox: boolean;\n\t/**\n   * SVGR을 사용할지 여부\n   */\n\tprivate readonly useSvgr: boolean;\n\t/**\n   * SVG Title 태그를 노출할지 여부\n   */\n\tprivate readonly title: boolean;\n\t/**\n   * SVG Desc 태그를 노출할지 여부\n   */\n\tprivate readonly description: boolean;\n  \n\t/**\n   * SvgComponentGenerator 클래스의 생성자입니다.\n   * @param {SvgComponentGeneratorOption} SVG 컴포넌트 생성 옵션 객체\n   */\n\tconstructor({ \n\t\tsvgFileDir,\n\t\toutputDir,\n\t\tremoveViewBox = false,\n\t\ttypescript = false, \n\t\tuseSvgr = false,\n\t\ttitle = false,\n\t\tdescription = false,\n\t}: SvgComponentGeneratorOption) {\n\t\tthis.svgFileDir = svgFileDir;\n\t\tthis.outputDir = outputDir ?? svgFileDir;\n\t\tthis.removeViewBox = removeViewBox;\n\t\tthis.useSvgr = useSvgr;\n\t\tthis.typescript = typescript;\n\t\tthis.title = title;\n\t\tthis.description = description;\n\t}\n\n\t/**\n   * SVG 파일 리스트를 파싱하여 타입 정의를 생성합니다.\n   * @param {string[]} list SVG 파일 이름 리스트\n   * @returns 타입 정의 문자열\n   */\n\tparseSvgListForType(list: string[]) {\n\t\tconst fileList = list.map((file) => `${file.replace('.svg', '')}`);\n  \n\t\tconst staticSvgIconName = fileList.map(item => `'${item}'`).join(' | ');\n\t\tconst svgComponentName = fileList.map(item => `'${`Svg${_startCase(item.replace(/\\//gi, '-').replace('.svg', '')).replace(/ /gi, '')}'`}`).join(' | ');\n\t\tconst particalSvgObj = fileList.filter(item => item.includes('/')).reduce<Record<string, string>>((acc, cur) => {\n\t\t\tconst arr = cur.split('/');\n\t\t\tconst fileName = arr.pop();\n  \n\t\t\tconst directoryPascalName = _startCase(arr.join('-')).replace(/ /gi, '');\n  \n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[directoryPascalName]: acc[directoryPascalName] ? `${acc[directoryPascalName]} | '${fileName}'` : `'${fileName}'`,\n\t\t\t};\n\t\t}, {});\n  \n\t\tconst particalSvgIconName = Object.entries(particalSvgObj).map(([key, value]) => `export type ${key}IconType = ${value};\\n`).join('');\n  \n\t\treturn { staticSvgIconName, particalSvgIconName, svgComponentName };\n\t}\n\n\t/**\n   * SVG 파일 리스트를 파싱하여 파일 객체를 생성하고 React 컴포넌트 문자열을 생성합니다.\n   * @param {string[]} list SVG 파일 이름 리스트\n   * @returns React 컴포넌트 문자열과 관련 정보\n   */\n\tasync parseSvgListForFile(list: string[]) {\n\t\tconst fileObject =  list.reduce<Record<string, string>>((acc, cur) => {\n\t\t\tconst fileName = `Svg${_startCase(cur.replace(/\\//gi, '-').replace('.svg', '')).replace(/ /gi, '')}`;\n\t\t\tacc = {\n\t\t\t\t...acc,\n\t\t\t\t[fileName]: cur,\n\t\t\t};\n  \n\t\t\treturn acc;\n\t\t}, {});\n\t\tconst fileList = Object.entries(fileObject);\n\t\tconst relativePath = path.relative(this.outputDir, this.svgFileDir);\n\t\tconst importString = fileList.reduce((acc, [key, value]) => acc += `import ${key} from '${relativePath}/${value}';\\n`, '').replace(/\\n/gi, '');\n\n\t\tlet componentFuncsString = '';\n\n\t\tfor (const [key, value] of fileList) {\n\t\t\tconst data = await readFile(`${this.svgFileDir}/${value}`, 'utf8');\n\n\t\t\t// const parser = new DOMParser();\n\t\t\tconst regex = /(<svg[^>]*)/;\n\t\t\tconst replacement = '$1 {...props}';\n\t\t\tlet svgElement = data.replace(/([a-z])[-:]([a-z])/g, function (_, p1, p2) {\n\t\t\t\treturn `${p1}${p2.toUpperCase()}`;\n\t\t\t}).replace(regex, replacement);\n\n\t\t\tif (this.description) {\n\t\t\t\tsvgElement = svgElement.replace(/(<svg[^>]*>)/g, '$1{!!props.description && <desc>{props.description}</desc>}');\n\t\t\t}\n\n\t\t\tif (this.title) {\n\t\t\t\tsvgElement = svgElement.replace(/(<svg[^>]*>)/g, `$1<title>{props.title ?? '${key}'}</title>`);\n\t\t\t}\n\n\t\t\tif (this.removeViewBox) {\n\t\t\t\tsvgElement = svgElement.replace(/viewBox=\"[^\"]*\"/gi, '');\n\t\t\t}\n\n\t\t\tconst type = 'React.SVGAttributes<SVGSVGElement> & { title?: string; description?: string; }';\n\n\t\t\tcomponentFuncsString += `const ${key} = (props${this.typescript ? `: ${type}` : ''} = {}) => { return (${svgElement}); };\\n`;\n\t\t}\n\n\t\tconst exportString = fileList.reduce((acc, [key, _value], index) => {\n\t\t\tif (index === 0) acc = 'export {\\n';\n\t\t\tacc += `${index !== 0 ? ',' : ''}  ${key}\\n`;\n\t\t\tif (index === Object.entries(fileObject).length - 1) acc += ' };';\n  \n\t\t\treturn acc;\n\t\t}, '').replace(/\\n/gi, '');\n  \n\t\treturn { importString, componentFuncsString, exportString };\n\t}\n\n\t/**\n   * 주어진 파일 리스트에서 SVG 파일 이름만 필터링합니다.\n   * @param {string[]} list 파일 이름 리스트\n   * @returns SVG 파일 이름 리스트\n   */\n\tfilterSvgFileNameList(list: string[]) {\n\t\treturn list\n\t\t\t.filter((name) => name.endsWith('.svg'));\n\t}\n\n\n\t/**\n   * 지정된 디렉토리에서 SVG 파일 리스트를 읽습니다.\n   * @param {string} dir SVG 파일이 위치한 디렉토리 경로\n   * @param {string} [dirName=''] 현재 디렉토리 이름\n   * @returns SVG 파일 경로 리스트\n   */\n\treadSvgFileList = async (dir: string, dirName = ''): Promise<string[]> => {\n\t\tconst dirents = await readdir(dir, { withFileTypes: true });\n\t\tconst files = await Promise.all(\n\t\t\tdirents.map(async (dirent) => {\n\t\t\t\tconst newDirName = `${dirName ? `${dirName}/` : ''}${dirent.name}`;\n\t\t\t\tconst res = path.resolve(dir, dirent.name);\n\t\t\t\treturn dirent.isDirectory() && dirent.name !== 'types'\n\t\t\t\t\t? this.readSvgFileList(res, newDirName)\n\t\t\t\t\t: newDirName;\n\t\t\t}),\n\t\t);\n\t\tconst concatList = Array.prototype.concat(...files) as string[];\n  \n\t\treturn concatList;\n\t};\n\n\t/**\n   * SVG 타입 파일을 생성합니다.\n   * @param {string[]} list SVG 파일 이름 리스트\n   */\n\tasync writeSvgTypeFile(list: string[]) {\n\t\tif (!this.typescript) return;\n\n\t\tconst { staticSvgIconName, particalSvgIconName, svgComponentName } = this.parseSvgListForType(list);\n\n\t\tconst typeDir = `${this.outputDir}/types`;\n\n\t\tawait mkdir(typeDir, { recursive: true });\n  \n\t\tif (existsSync(typeDir)) {\n\t\t\treturn writeFile(\n\t\t\t\t`${typeDir}/index.d.ts`,\n\t\t\t\t`/* eslint-disable */\\nexport type StaticSvgIconName = ${staticSvgIconName};\\n${particalSvgIconName}`\n        + `export type SvgComponentName = ${svgComponentName}`,\n\t\t\t\t{ flag: 'w' },\n\t\t\t)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconsole.log('✨[Static Svg Type File] is Generated!'); \n\t\t\t\t})\n\t\t\t\t.catch(console.error);\n\t\t}\n\n\t\t\n\t}\n\n\t/**\n   * 정적 SVG export 파일을 생성합니다.\n   * @param {string[]} list SVG 파일 이름 리스트\n   */\n\tasync writeStaticSvgExportFile(list: string[]) {\n\t\tconst { componentFuncsString, importString, exportString } = await this.parseSvgListForFile(list);\n\n\t\tawait mkdir(this.outputDir, { recursive: true });\n  \n\t\treturn writeFile(\n\t\t\t`${this.outputDir}/index.${this.typescript ? 'tsx' : 'jsx'}`,\n\t\t\t`/* eslint-disable */ \\nimport React from \"react\";\\n\\n${this.useSvgr ? importString : componentFuncsString}\\n${exportString}`,\n\t\t\t{ flag: 'w' },\n\t\t)\n\t\t\t.then(() => {\n\t\t\t\tconsole.log('✨[Static Svg Export File] is Generated!'); \n\t\t\t})\n\t\t\t.catch(console.error);\n\t}\n\n\tgenerate = async () => {\n\t\tif (generating) return;\n\n\t\ttry {\n\t\t\tgenerating = true;\n\n\t\t\tconst fileNameList = await this.readSvgFileList(this.svgFileDir);\n\t\t\tconst svgFileList = this.filterSvgFileNameList(fileNameList);\n      \n\t\t\tawait this.writeSvgTypeFile(svgFileList);\n\t\t\tawait this.writeStaticSvgExportFile(svgFileList);\n\t\t} finally {\n\t\t\tsetTimeout(() => {\n\t\t\t\tgenerating = false;\n\t\t\t}, 1500);\n\t\t\t\n\t\t}\n   \n\t};\n}\n\n\nexport default SvgComponentGenerator;"]}